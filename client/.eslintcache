[{"/home/droid_x/Documents/WEBD/MERN-starter/client/src/index.js":"1","/home/droid_x/Documents/WEBD/MERN-starter/client/src/components/index.js":"2","/home/droid_x/Documents/WEBD/MERN-starter/client/src/store/index.js":"3","/home/droid_x/Documents/WEBD/MERN-starter/client/src/components/AssignmentList.js":"4","/home/droid_x/Documents/WEBD/MERN-starter/client/src/components/Footer.js":"5","/home/droid_x/Documents/WEBD/MERN-starter/client/src/components/Login.js":"6","/home/droid_x/Documents/WEBD/MERN-starter/client/src/components/App.js":"7","/home/droid_x/Documents/WEBD/MERN-starter/client/src/components/Signup.js":"8","/home/droid_x/Documents/WEBD/MERN-starter/client/src/components/Profile.js":"9","/home/droid_x/Documents/WEBD/MERN-starter/client/src/components/Page404.js":"10","/home/droid_x/Documents/WEBD/MERN-starter/client/src/components/AppBar.js":"11","/home/droid_x/Documents/WEBD/MERN-starter/client/src/components/Home.js":"12","/home/droid_x/Documents/WEBD/MERN-starter/client/src/components/SnackBar.js":"13","/home/droid_x/Documents/WEBD/MERN-starter/client/src/components/Settings.js":"14","/home/droid_x/Documents/WEBD/MERN-starter/client/src/actions/user.js":"15","/home/droid_x/Documents/WEBD/MERN-starter/client/src/actions/snackbar.js":"16","/home/droid_x/Documents/WEBD/MERN-starter/client/src/reducers/index.js":"17","/home/droid_x/Documents/WEBD/MERN-starter/client/src/actions/actionTypes.js":"18","/home/droid_x/Documents/WEBD/MERN-starter/client/src/helpers/urls.js":"19","/home/droid_x/Documents/WEBD/MERN-starter/client/src/reducers/snackbar.js":"20","/home/droid_x/Documents/WEBD/MERN-starter/client/src/reducers/user.js":"21"},{"size":425,"mtime":1609494258099,"results":"22","hashOfConfig":"23"},{"size":522,"mtime":1609494258099,"results":"24","hashOfConfig":"23"},{"size":288,"mtime":1609494258099,"results":"25","hashOfConfig":"23"},{"size":159,"mtime":1609494258099,"results":"26","hashOfConfig":"23"},{"size":627,"mtime":1609494258099,"results":"27","hashOfConfig":"23"},{"size":2366,"mtime":1609503198255,"results":"28","hashOfConfig":"23"},{"size":1631,"mtime":1609494258099,"results":"29","hashOfConfig":"23"},{"size":3142,"mtime":1609503222559,"results":"30","hashOfConfig":"23"},{"size":1257,"mtime":1609511472651,"results":"31","hashOfConfig":"23"},{"size":299,"mtime":1609494258099,"results":"32","hashOfConfig":"23"},{"size":7985,"mtime":1609517485757,"results":"33","hashOfConfig":"23"},{"size":200,"mtime":1609494258099,"results":"34","hashOfConfig":"23"},{"size":1569,"mtime":1609494258099,"results":"35","hashOfConfig":"23"},{"size":5793,"mtime":1609498620713,"results":"36","hashOfConfig":"23"},{"size":4948,"mtime":1609501881713,"results":"37","hashOfConfig":"23"},{"size":282,"mtime":1609494258099,"results":"38","hashOfConfig":"23"},{"size":161,"mtime":1609494258099,"results":"39","hashOfConfig":"23"},{"size":719,"mtime":1609494258099,"results":"40","hashOfConfig":"23"},{"size":367,"mtime":1609494258099,"results":"41","hashOfConfig":"23"},{"size":581,"mtime":1609494258099,"results":"42","hashOfConfig":"23"},{"size":1339,"mtime":1609494258099,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"1dlx6na",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"46"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"46"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"/home/droid_x/Documents/WEBD/MERN-starter/client/src/index.js",[],["91","92"],"/home/droid_x/Documents/WEBD/MERN-starter/client/src/components/index.js",[],"/home/droid_x/Documents/WEBD/MERN-starter/client/src/store/index.js",[],"/home/droid_x/Documents/WEBD/MERN-starter/client/src/components/AssignmentList.js",[],"/home/droid_x/Documents/WEBD/MERN-starter/client/src/components/Footer.js",[],"/home/droid_x/Documents/WEBD/MERN-starter/client/src/components/Login.js",["93"],"import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { Button, TextField, Paper, Tabs, Tab } from '@material-ui/core';\n\nimport { createSession } from '../actions/user';\n\nfunction Login(props) {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  // For the type tabs\n  const [type, setType] = useState('teacher');\n\n  const handleTypeChange = (event, newType) => {\n    setType(newType);\n  };\n\n  let onChangeEmail = (e) => {\n    setEmail(e.target.value);\n  };\n\n  let onChangePassword = (e) => {\n    setPassword(e.target.value);\n  };\n\n  function onSubmit(e) {\n    e.preventDefault();\n    let emailContent = email.trim();\n\n    if (emailContent.length !== 0 && password.length !== 0) {\n      console.log(emailContent, password);\n      props.dispatch(createSession(emailContent, password, type));\n      setPassword('');\n    }\n  }\n\n  let { inProgress, isLoggedin } = props.user;\n  if (isLoggedin) {\n    return <Redirect to=\"/\" />;\n  }\n\n  return (\n    <form className=\"form-container\">\n      <p className=\"form-title\">Login</p>\n\n      <Paper square>\n        <Tabs\n          variant=\"fullWidth\"\n          value={type}\n          indicatorColor=\"secondary\"\n          textColor=\"primary\"\n          onChange={handleTypeChange}\n          centered\n        >\n          <Tab label=\"Teacher\" value=\"teacher\" />\n          <Tab label=\"Student\" value=\"student\" />\n        </Tabs>\n      </Paper>\n\n      <TextField\n        id=\"email\"\n        label=\"email\"\n        value={email}\n        variant=\"outlined\"\n        onChange={onChangeEmail}\n      />\n      <br />\n      <TextField\n        id=\"password\"\n        type=\"password\"\n        label=\"password\"\n        value={password}\n        variant=\"outlined\"\n        onChange={onChangePassword}\n      />\n      <Button\n        type=\"submit\"\n        className=\"submit-btn\"\n        disabled={inProgress}\n        variant=\"contained\"\n        color=\"primary\"\n        onClick={onSubmit}\n      >\n        Login\n      </Button>\n      <a href=\"#\">\n        <img\n          alt=\"sign up with google\"\n          src=\"https://www.flaticon.com/svg/static/icons/svg/281/281764.svg\"\n        />\n      </a>\n    </form>\n  );\n}\n\nfunction mapStateToProps(state) {\n  return {\n    user: state.user,\n  };\n}\n\nexport default connect(mapStateToProps)(Login);\n","/home/droid_x/Documents/WEBD/MERN-starter/client/src/components/App.js",[],"/home/droid_x/Documents/WEBD/MERN-starter/client/src/components/Signup.js",["94"],"import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { Button, TextField, Paper, Tabs, Tab } from '@material-ui/core';\n\nimport { createUser } from '../actions/user';\n\nfunction Signup(props) {\n  function useInput(initialValue) {\n    const [value, setValue] = useState(initialValue);\n    function handleChange(e) {\n      setValue(e.target.value);\n    }\n    return [value, handleChange];\n  }\n\n  const [email, setEmail] = useInput('');\n  const [password, setPassword] = useInput('');\n  const [name, setName] = useInput('');\n  const [confirmPassword, setConfirmPassword] = useInput('');\n\n  // For the type tabs\n  const [type, setType] = useState('teacher');\n\n  const handleTypeChange = (event, newType) => {\n    setType(newType);\n  };\n\n  function onSubmit(e) {\n    e.preventDefault();\n    let emailContent = email.trim();\n    let nameContent = name.trim();\n\n    if (password !== confirmPassword) {\n      console.log('Passwords didnt match');\n      return;\n    }\n\n    if (\n      emailContent.length !== 0 &&\n      password.length !== 0 &&\n      nameContent.length !== 0\n    ) {\n      // console.log(type);\n      // console.log(nameContent, emailContent, password);\n      props.dispatch(\n        createUser(nameContent, emailContent, password, confirmPassword, type)\n      );\n    }\n  }\n\n  let { inProgress, isLoggedin } = props.user;\n\n  if (isLoggedin) {\n    console.log('Redirect');\n    return <Redirect to=\"/\" />;\n  }\n\n  return (\n    <form className=\"form-container\">\n      <p className=\"form-title\">Signup</p>\n\n      <Paper square>\n        <Tabs\n          variant=\"fullWidth\"\n          value={type}\n          indicatorColor=\"secondary\"\n          textColor=\"primary\"\n          onChange={handleTypeChange}\n          centered\n        >\n          <Tab label=\"Teacher\" value=\"teacher\" />\n          <Tab label=\"Student\" value=\"student\" />\n        </Tabs>\n      </Paper>\n\n      <TextField\n        id=\"name\"\n        label=\"name\"\n        variant=\"outlined\"\n        value={name}\n        onChange={setName}\n      />\n      <TextField\n        id=\"email\"\n        label=\"email\"\n        variant=\"outlined\"\n        value={email}\n        onChange={setEmail}\n      />\n\n      <TextField\n        id=\"password\"\n        type=\"password\"\n        label=\"password\"\n        variant=\"outlined\"\n        value={password}\n        onChange={setPassword}\n      />\n      <TextField\n        id=\"confirm_password\"\n        type=\"password\"\n        label=\"confirm password\"\n        variant=\"outlined\"\n        value={confirmPassword}\n        onChange={setConfirmPassword}\n      />\n\n      <Button\n        type=\"submit\"\n        className=\"submit-btn\"\n        disabled={inProgress}\n        variant=\"contained\"\n        color=\"primary\"\n        onClick={onSubmit}\n      >\n        Signup\n      </Button>\n      <a href=\"#\">\n        <img\n          alt=\"sign up with google\"\n          src=\"https://www.flaticon.com/svg/static/icons/svg/281/281764.svg\"\n        />\n      </a>\n    </form>\n  );\n}\n\nfunction mapStateToProps(state) {\n  return {\n    user: state.user,\n  };\n}\n\nexport default connect(mapStateToProps)(Signup);\n","/home/droid_x/Documents/WEBD/MERN-starter/client/src/components/Profile.js",["95"],"import React from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { Card, CardContent, Typography } from '@material-ui/core';\nimport AlternateEmailIcon from '@material-ui/icons/AlternateEmail';\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\n\nfunction Profile(props) {\n  let inProgress = props.user.inProgress;\n\n  if (!props.user.isLoggedin) {\n    return <Redirect to=\"/login\" />;\n  }\n\n  let { name, email, bio, subject, type, contact } = props.user.user;\n\n  return (\n    <React.Fragment>\n      <Card>\n        <CardContent>\n          <Typography>{type}</Typography>\n\n          <Typography style={{ fontSize: '2rem' }}>\n            <AccountCircleIcon />\n            &nbsp;{name}\n          </Typography>\n\n          <Typography style={{ fontSize: '2rem' }}>\n            <AlternateEmailIcon />\n            &nbsp;{email}\n          </Typography>\n          <Typography>Bio: {bio}</Typography>\n\n          <Typography>Subject: {subject}</Typography>\n          <Typography>Contact: {contact}</Typography>\n        </CardContent>\n      </Card>\n    </React.Fragment>\n  );\n}\n\nfunction mapStateToProps(state) {\n  return {\n    user: state.user,\n  };\n}\n\nexport default connect(mapStateToProps)(Profile);\n","/home/droid_x/Documents/WEBD/MERN-starter/client/src/components/Page404.js",[],"/home/droid_x/Documents/WEBD/MERN-starter/client/src/components/AppBar.js",[],"/home/droid_x/Documents/WEBD/MERN-starter/client/src/components/Home.js",[],"/home/droid_x/Documents/WEBD/MERN-starter/client/src/components/SnackBar.js",[],"/home/droid_x/Documents/WEBD/MERN-starter/client/src/components/Settings.js",["96","97"],"import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport {\n  Select,\n  TextField,\n  FormGroup,\n  MenuItem,\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { setSnackBar } from '../actions/snackbar';\nimport { updateUser } from '../actions/user';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(1),\n      width: '25ch',\n    },\n  },\n  formGroups: {\n    display: 'flex',\n    flexDirection: 'column',\n    width: '50%',\n    minWidth: 200,\n    margin: '50px auto',\n    justifyContent: 'center',\n  },\n  formItems: {\n    margin: '4px',\n  },\n}));\n\nfunction Settings(props) {\n  const classes = useStyles();\n\n  function useInput(initialValue) {\n    const [value, setValue] = useState(initialValue);\n    function handleChange(e) {\n      setValue(e.target.value);\n    }\n    return [value, handleChange];\n  }\n\n  const subjectOptions = ['Maths', 'Physics', 'Chemistry'];\n  const [email, setEmail] = useInput(props.user.user.email);\n  const [name, setName] = useInput(props.user.user.name);\n  const [contact, setContact] = useInput(props.user.user.contact);\n  const [subject, setSubject] = useInput(props.user.user.subject);\n  const [bio, setBio] = useInput(props.user.user.bio);\n  const [password, setPassword] = useInput('');\n\n  const [open, setOpen] = useState(false);\n\n  let handleSubmit = (e) => {\n    console.log(email, name, contact, subject, bio);\n    // validate all the fields\n    if (\n      !email ||\n      email.trim().length === 0 ||\n      !name ||\n      name.trim().length === 0 ||\n      !contact ||\n      contact === 0\n    ) {\n      props.dispatch(setSnackBar('error', 'Required field empty', 3000));\n      return;\n    }\n\n    setOpen(true);\n  };\n\n  const handleDialogClose = () => {\n    setOpen(false);\n  };\n\n  const handleConfirm = () => {\n    let old_password = document.getElementById('old_password').value;\n\n    if (old_password.length === 0) {\n      setSnackBar('error', 'Password is empty', 3000);\n      return;\n    }\n\n    props.dispatch(\n      updateUser(\n        name,\n        email,\n        props.user.user.type,\n        bio,\n        '',\n        contact,\n        subject,\n        old_password\n      )\n    );\n\n    handleDialogClose();\n  };\n\n  let PasswordConfirmDialog = (props) => {\n    return (\n      <Dialog\n        open={open}\n        onClose={handleConfirm}\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <DialogTitle id=\"form-dialog-title\">Please Confirm</DialogTitle>\n        <DialogContent>\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            id=\"old_password\"\n            label=\"Password\"\n            type=\"password\"\n            fullWidth\n            required\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleDialogClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={handleConfirm} color=\"primary\">\n            Confirm\n          </Button>\n        </DialogActions>\n      </Dialog>\n    );\n  };\n\n  if (!props.user.isLoggedin) {\n    return <Redirect to=\"/login\" />;\n  }\n\n  return (\n    <React.Fragment>\n      <form>\n        <FormGroup className={classes.formGroups}>\n          <TextField\n            id=\"email\"\n            className={classes.formItems}\n            // type=\"email\"\n            label=\"Email\"\n            variant=\"outlined\"\n            required\n            value={email}\n            onChange={setEmail}\n          />\n          {/* <TextField\n            id=\"password\"\n            className={classes.formItems}\n            type=\"password\"\n            label=\"New Password\"\n            variant=\"outlined\"\n            value={password}\n            onChange={setPassword}\n          /> */}\n\n          <TextField\n            id=\"name\"\n            className={classes.formItems}\n            type=\"text\"\n            label=\"name\"\n            variant=\"outlined\"\n            required\n            value={name}\n            onChange={setName}\n          />\n          <TextField\n            id=\"contact\"\n            className={classes.formItems}\n            type=\"number\"\n            label=\"Contact No\"\n            variant=\"outlined\"\n            placeholder=\"+91\"\n            required\n            value={contact}\n            onChange={setContact}\n          />\n        </FormGroup>\n\n        <FormGroup className={classes.formGroups}>\n          <TextField\n            id=\"bio\"\n            multiline\n            className={classes.formItems}\n            type=\"text\"\n            label=\"Bio\"\n            variant=\"outlined\"\n            placeholder=\"Add some Details\"\n            rows={4}\n            rowsMax={6}\n            value={bio}\n            onChange={setBio}\n          />\n\n          <Select\n            className={classes.formItems}\n            labelId=\"subject\"\n            id=\"demo-simple-select-filled\"\n            displayEmpty\n            variant=\"outlined\"\n            value={subject}\n            onChange={setSubject}\n          >\n            {subjectOptions.map((subject) => (\n              <MenuItem value={subject}>{subject}</MenuItem>\n            ))}\n          </Select>\n        </FormGroup>\n        <FormGroup className={classes.formGroups}>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.formItems + ' updBtn'}\n            onClick={handleSubmit}\n          >\n            Update\n          </Button>\n        </FormGroup>\n      </form>\n\n      <PasswordConfirmDialog />\n    </React.Fragment>\n  );\n}\n\nfunction mapStateToProps(state) {\n  return {\n    user: state.user,\n    snackbar: state.snackbar,\n  };\n}\n\nexport default connect(mapStateToProps)(Settings);\n","/home/droid_x/Documents/WEBD/MERN-starter/client/src/actions/user.js",[],"/home/droid_x/Documents/WEBD/MERN-starter/client/src/actions/snackbar.js",[],"/home/droid_x/Documents/WEBD/MERN-starter/client/src/reducers/index.js",[],"/home/droid_x/Documents/WEBD/MERN-starter/client/src/actions/actionTypes.js",[],"/home/droid_x/Documents/WEBD/MERN-starter/client/src/helpers/urls.js",[],"/home/droid_x/Documents/WEBD/MERN-starter/client/src/reducers/snackbar.js",[],"/home/droid_x/Documents/WEBD/MERN-starter/client/src/reducers/user.js",[],{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","severity":1,"message":"103","line":87,"column":7,"nodeType":"104","endLine":87,"endColumn":19},{"ruleId":"102","severity":1,"message":"103","line":119,"column":7,"nodeType":"104","endLine":119,"endColumn":19},{"ruleId":"105","severity":1,"message":"106","line":9,"column":7,"nodeType":"107","messageId":"108","endLine":9,"endColumn":17},{"ruleId":"105","severity":1,"message":"109","line":57,"column":10,"nodeType":"107","messageId":"108","endLine":57,"endColumn":18},{"ruleId":"105","severity":1,"message":"110","line":57,"column":20,"nodeType":"107","messageId":"108","endLine":57,"endColumn":31},"no-native-reassign",["111"],"no-negated-in-lhs",["112"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'inProgress' is assigned a value but never used.","Identifier","unusedVar","'password' is assigned a value but never used.","'setPassword' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]