[{"/home/droid_x/Documents/WEBD/academic-portal/client/src/index.js":"1","/home/droid_x/Documents/WEBD/academic-portal/client/src/components/index.js":"2","/home/droid_x/Documents/WEBD/academic-portal/client/src/components/App.js":"3","/home/droid_x/Documents/WEBD/academic-portal/client/src/store/index.js":"4","/home/droid_x/Documents/WEBD/academic-portal/client/src/reducers/index.js":"5","/home/droid_x/Documents/WEBD/academic-portal/client/src/reducers/user.js":"6","/home/droid_x/Documents/WEBD/academic-portal/client/src/actions/actionTypes.js":"7","/home/droid_x/Documents/WEBD/academic-portal/client/src/components/AssignmentList.js":"8","/home/droid_x/Documents/WEBD/academic-portal/client/src/components/Footer.js":"9","/home/droid_x/Documents/WEBD/academic-portal/client/src/components/Login.js":"10","/home/droid_x/Documents/WEBD/academic-portal/client/src/components/Signup.js":"11","/home/droid_x/Documents/WEBD/academic-portal/client/src/actions/user.js":"12","/home/droid_x/Documents/WEBD/academic-portal/client/src/helpers/urls.js":"13","/home/droid_x/Documents/WEBD/academic-portal/client/src/components/Home.js":"14","/home/droid_x/Documents/WEBD/academic-portal/client/src/components/AppBar.js":"15","/home/droid_x/Documents/WEBD/academic-portal/client/src/components/Page404.js":"16","/home/droid_x/Documents/WEBD/academic-portal/client/src/components/Profile.js":"17","/home/droid_x/Documents/WEBD/academic-portal/client/src/components/SnackBar.js":"18","/home/droid_x/Documents/WEBD/academic-portal/client/src/reducers/snackbar.js":"19","/home/droid_x/Documents/WEBD/academic-portal/client/src/actions/snackbar.js":"20","/home/droid_x/Documents/WEBD/academic-portal/client/src/components/Settings.js":"21"},{"size":425,"mtime":1609017240874,"results":"22","hashOfConfig":"23"},{"size":522,"mtime":1609315303602,"results":"24","hashOfConfig":"23"},{"size":1631,"mtime":1609315613959,"results":"25","hashOfConfig":"23"},{"size":288,"mtime":1609016940484,"results":"26","hashOfConfig":"23"},{"size":161,"mtime":1609312754842,"results":"27","hashOfConfig":"23"},{"size":1339,"mtime":1609017365102,"results":"28","hashOfConfig":"23"},{"size":719,"mtime":1609312728285,"results":"29","hashOfConfig":"23"},{"size":159,"mtime":1609019105399,"results":"30","hashOfConfig":"23"},{"size":627,"mtime":1609019341496,"results":"31","hashOfConfig":"23"},{"size":1798,"mtime":1609019498721,"results":"32","hashOfConfig":"23"},{"size":2771,"mtime":1609019786766,"results":"33","hashOfConfig":"23"},{"size":4894,"mtime":1609314350197,"results":"34","hashOfConfig":"23"},{"size":367,"mtime":1609020891503,"results":"35","hashOfConfig":"23"},{"size":200,"mtime":1609019146435,"results":"36","hashOfConfig":"23"},{"size":8169,"mtime":1609431253159,"results":"37","hashOfConfig":"23"},{"size":299,"mtime":1609268083789,"results":"38","hashOfConfig":"23"},{"size":2556,"mtime":1609313282548,"results":"39","hashOfConfig":"23"},{"size":1569,"mtime":1609313095059,"results":"40","hashOfConfig":"23"},{"size":581,"mtime":1609314067936,"results":"41","hashOfConfig":"23"},{"size":282,"mtime":1609313383169,"results":"42","hashOfConfig":"23"},{"size":5475,"mtime":1609432112423,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"5dd5pm",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"46"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"46"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/droid_x/Documents/WEBD/academic-portal/client/src/index.js",[],["90","91"],"/home/droid_x/Documents/WEBD/academic-portal/client/src/components/index.js",[],"/home/droid_x/Documents/WEBD/academic-portal/client/src/components/App.js",[],"/home/droid_x/Documents/WEBD/academic-portal/client/src/store/index.js",[],"/home/droid_x/Documents/WEBD/academic-portal/client/src/reducers/index.js",[],"/home/droid_x/Documents/WEBD/academic-portal/client/src/reducers/user.js",[],"/home/droid_x/Documents/WEBD/academic-portal/client/src/actions/actionTypes.js",[],"/home/droid_x/Documents/WEBD/academic-portal/client/src/components/AssignmentList.js",[],"/home/droid_x/Documents/WEBD/academic-portal/client/src/components/Footer.js",[],"/home/droid_x/Documents/WEBD/academic-portal/client/src/components/Login.js",["92"],"import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { Button, TextField } from '@material-ui/core';\n\nimport { createSession } from '../actions/user';\n\nfunction Login(props) {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  let onChangeEmail = (e) => {\n    setEmail(e.target.value);\n  };\n\n  let onChangePassword = (e) => {\n    setPassword(e.target.value);\n  };\n\n  function onSubmit(e) {\n    e.preventDefault();\n    let emailContent = email.trim();\n\n    if (emailContent.length !== 0 && password.length !== 0) {\n      console.log(emailContent, password);\n      props.dispatch(createSession(emailContent, password, 'teacher'));\n      setPassword('');\n    }\n  }\n\n  let { inProgress, isLoggedin } = props.user;\n  if (isLoggedin) {\n    return <Redirect to=\"/\" />;\n  }\n\n  return (\n    <form className=\"form-container\">\n      <p className=\"form-title\">Login</p>\n      <TextField\n        id=\"email\"\n        label=\"email\"\n        value={email}\n        variant=\"outlined\"\n        onChange={onChangeEmail}\n      />\n      <br />\n      <TextField\n        id=\"password\"\n        type=\"password\"\n        label=\"password\"\n        value={password}\n        variant=\"outlined\"\n        onChange={onChangePassword}\n      />\n      <Button\n        type=\"submit\"\n        className=\"submit-btn\"\n        disabled={inProgress}\n        onClick={onSubmit}\n      >\n        Login\n      </Button>\n      <a href=\"#\">\n        <img\n          alt=\"sign up with google\"\n          src=\"https://www.flaticon.com/svg/static/icons/svg/281/281764.svg\"\n        />\n      </a>\n    </form>\n  );\n}\n\nfunction mapStateToProps(state) {\n  return {\n    user: state.user,\n  };\n}\n\nexport default connect(mapStateToProps)(Login);\n","/home/droid_x/Documents/WEBD/academic-portal/client/src/components/Signup.js",["93"],"import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { Button, TextField } from '@material-ui/core';\n\nimport { createUser } from '../actions/user';\n\nfunction Signup(props) {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [name, setName] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n\n  let onChangeName = (e) => {\n    setName(e.target.value);\n  };\n\n  let onChangeEmail = (e) => {\n    setEmail(e.target.value);\n  };\n\n  let onChangePassword = (e) => {\n    setPassword(e.target.value);\n  };\n\n  let onChangeConfirmPassword = (e) => {\n    setConfirmPassword(e.target.value);\n  };\n\n  function onSubmit(e) {\n    e.preventDefault();\n    let emailContent = email.trim();\n    let nameContent = name.trim();\n\n    if (password !== confirmPassword) {\n      console.log('Passwords didnt match');\n      return;\n    }\n\n    if (\n      emailContent.length !== 0 &&\n      password.length !== 0 &&\n      nameContent.length !== 0\n    ) {\n      console.log(nameContent, emailContent, password);\n      props.dispatch(\n        createUser(\n          nameContent,\n          emailContent,\n          password,\n          confirmPassword,\n          'teacher'\n        )\n      );\n      setPassword('');\n      setConfirmPassword('');\n    }\n  }\n\n  let { inProgress, isLoggedin } = props.user;\n\n  if (isLoggedin) {\n    console.log('Redirect');\n    return <Redirect to=\"/\" />;\n  }\n\n  return (\n    <form className=\"form-container\">\n      <p className=\"form-title\">Signup</p>\n\n      <TextField\n        id=\"name\"\n        label=\"name\"\n        variant=\"outlined\"\n        value={name}\n        onChange={onChangeName}\n      />\n      <TextField\n        id=\"email\"\n        label=\"email\"\n        variant=\"outlined\"\n        value={email}\n        onChange={onChangeEmail}\n      />\n\n      <TextField\n        id=\"password\"\n        type=\"password\"\n        label=\"password\"\n        variant=\"outlined\"\n        value={password}\n        onChange={onChangePassword}\n      />\n      <TextField\n        id=\"confirm_password\"\n        type=\"password\"\n        label=\"confirm password\"\n        variant=\"outlined\"\n        value={confirmPassword}\n        onChange={onChangeConfirmPassword}\n      />\n\n      <Button\n        type=\"submit\"\n        className=\"submit-btn\"\n        disabled={inProgress}\n        onClick={onSubmit}\n      >\n        Signup\n      </Button>\n      <a href=\"#\">\n        <img\n          alt=\"sign up with google\"\n          src=\"https://www.flaticon.com/svg/static/icons/svg/281/281764.svg\"\n        />\n      </a>\n    </form>\n  );\n}\n\nfunction mapStateToProps(state) {\n  return {\n    user: state.user,\n  };\n}\n\nexport default connect(mapStateToProps)(Signup);\n","/home/droid_x/Documents/WEBD/academic-portal/client/src/actions/user.js",[],"/home/droid_x/Documents/WEBD/academic-portal/client/src/helpers/urls.js",[],"/home/droid_x/Documents/WEBD/academic-portal/client/src/components/Home.js",[],"/home/droid_x/Documents/WEBD/academic-portal/client/src/components/AppBar.js",[],"/home/droid_x/Documents/WEBD/academic-portal/client/src/components/Page404.js",[],"/home/droid_x/Documents/WEBD/academic-portal/client/src/components/Profile.js",["94","95"],"import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { Button, Grid, TextField } from '@material-ui/core';\nimport AlternateEmailIcon from '@material-ui/icons/AlternateEmail';\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\n// import { updateUser } from '../actions/user';\n\nfunction Profile(props) {\n  const [name, setName] = useState(props.user.user.name);\n  const [email, setEmail] = useState(props.user.user.email);\n  let inProgress = props.user.inProgress;\n\n  if (!props.user.isLoggedin) {\n    return <Redirect to=\"/login\" />;\n  }\n\n  let onChangeName = (e) => {\n    setName(e.target.value);\n  };\n\n  let onChangeEmail = (e) => {\n    setEmail(e.target.value);\n  };\n\n  function onSubmit(e) {\n    e.preventDefault();\n    let emailContent = email.trim();\n    let nameContent = name.trim();\n\n    if (emailContent.length !== 0 && nameContent.length !== 0) {\n      console.log(nameContent, emailContent);\n      //   props.dispatch(updateUser(nameContent, emailContent));\n    }\n  }\n\n  return (\n    <React.Fragment>\n      <div id=\"profile-page-container\">\n        <div id=\"cover-container\">\n          <img className=\"cover-img\" />\n        </div>\n\n        <div className=\"profile-update-container\">\n          <img\n            className=\"user-dp\"\n            src=\"https://cdn3.iconfinder.com/data/icons/users-6/100/2-256.png\"\n          />\n          <Grid container spacing={1} alignItems=\"flex-end\">\n            <Grid item>\n              <AccountCircleIcon />\n            </Grid>\n            <Grid item>\n              <TextField\n                id=\"name-field\"\n                label=\"name\"\n                value={name}\n                onChange={onChangeName}\n              />\n            </Grid>\n          </Grid>\n\n          <Grid container spacing={1} alignItems=\"flex-end\">\n            <Grid item>\n              <AlternateEmailIcon />\n            </Grid>\n            <Grid item>\n              <TextField\n                id=\"email-field\"\n                label=\"email\"\n                value={email}\n                onChange={onChangeEmail}\n              />\n            </Grid>\n          </Grid>\n          <Button\n            disabled={inProgress}\n            id=\"update-btn\"\n            color=\"primary\"\n            onClick={onSubmit}\n          >\n            update\n          </Button>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n}\n\nfunction mapStateToProps(state) {\n  return {\n    user: state.user,\n  };\n}\n\nexport default connect(mapStateToProps)(Profile);\n","/home/droid_x/Documents/WEBD/academic-portal/client/src/components/SnackBar.js",[],"/home/droid_x/Documents/WEBD/academic-portal/client/src/reducers/snackbar.js",[],"/home/droid_x/Documents/WEBD/academic-portal/client/src/actions/snackbar.js",[],"/home/droid_x/Documents/WEBD/academic-portal/client/src/components/Settings.js",[],{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","severity":1,"message":"101","line":63,"column":7,"nodeType":"102","endLine":63,"endColumn":19},{"ruleId":"100","severity":1,"message":"101","line":111,"column":7,"nodeType":"102","endLine":111,"endColumn":19},{"ruleId":"103","severity":1,"message":"104","line":41,"column":11,"nodeType":"102","endLine":41,"endColumn":40},{"ruleId":"103","severity":1,"message":"104","line":45,"column":11,"nodeType":"102","endLine":48,"endColumn":13},"no-native-reassign",["105"],"no-negated-in-lhs",["106"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","no-global-assign","no-unsafe-negation"]